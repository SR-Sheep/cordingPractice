package 프로그래머스;

import java.util.*;

public class 스택큐_기능개발 {
	/*
	 * 프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.
	또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고,
	이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.
	먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가
	주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

	제한 사항
	작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
	작업 진도는 100 미만의 자연수입니다.
	작업 속도는 100 이하의 자연수입니다.
	배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.
	 */
	
	
	public static int[] solution(int[] progresses, int[] speeds) {
		Queue<Integer> q = new LinkedList<>();
		for(int i=0;i<progresses.length;i++) {
			int progress=progresses[i]; //진행도
			int speed=speeds[i]; //속도
			int day=0; //경과일
			while(progress<100) { //100%가 넘을 때까지 경과일 증가
				progress+=speed;
				day++;
			}
			q.add(day); //경과일 q에 넣기
		}
		List<Integer> list = new ArrayList<Integer>(); //답을 제출할 list
		int before = q.poll(); //맨 처음 완성일을 전날로 지정
		list.add(1); //첫 완성 개수
		while(!q.isEmpty()) {
			int day=q.poll(); //다음 완성일
			if(before<day) { //이전보다 더 걸릴경우
				list.add(1); //배포 갯수 추가
				before=day; //이전 완성일 업데이트
			}else {
				//이전 완성일 보다 다음 완성일이 작거나 같으면 마지막 요소의 완성 갯수 증가
				list.set(list.size()-1, list.get(list.size()-1)+1);
			}
		}
		//list -> array
		int[] answer=new int[list.size()];
		for(int i=0;i<list.size();i++) answer[i]=list.get(i);
		return answer;
	}
	
	
	public static void main(String[] args) {
		int[][][] samples= {
							{{93, 30, 55},{1, 30, 5}},
							{{95, 90, 99, 99, 80, 99},{1, 1, 1, 1, 1, 1}}
						};
		for(int[][] sample:samples) {
			int[] progresses=sample[0];
			int[] speeds=sample[1];
			for(int answer:solution(progresses, speeds)) {
				System.out.print(answer+" ");
			}
			System.out.println();
		}
	}
}
